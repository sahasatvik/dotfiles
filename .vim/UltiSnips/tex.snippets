snippet ... "\dots" iA
\dots
endsnippet

snippet mm "Math" wA
$${1:${VISUAL}}$`!p
punctuation = t[2] and t[2][0] in [',', '.', '?']
if punctuation:
	if len(t[2]) == 1:
		t[2] = t[2] + ' '
	snip.rv='' 
else:
	snip.rv=' '
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet f/ "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

#priority 1000
#snippet '((\d+)?(\\)?([A-Za-z]+)(\^((\{\d+\})|(\d)))?)/' "symbol frac" wrA
#\\frac{`!p snip.rv = match.group(1)`}{$1}$0
#endsnippet

priority 10
snippet '(\d+)/' "number frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

#snippet '^.*\)/' "() frac" wrA
#`!p
#stripped = match.string[:-1]
#depth = 0
#i = len(stripped) - 1
#while True:
#	if stripped[i] == ')': depth += 1
#	if stripped[i] == '(': depth -= 1
#	if depth == 0: break;
#	i-=1
#snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
#`{$1}$0
#endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet sympy "sympyblock " b
sympy $1 sympy$0
endsnippet

snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet


snippet == "equals" iA
\; &= \; $1 
endsnippet

snippet ddx "d/dx" wA
\frac{\mathrm{d} ${1:}}{\mathrm{d}x} $0
endsnippet

snippet ddt "d/dt" wA
\frac{\mathrm{d} ${1:}}{\mathrm{d}t} $0
endsnippet

snippet ^^ "to the ... power" iA
^{$1}$2
endsnippet

snippet __ "subscript" iA
_{$1}$2
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" iA
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet EE "exists" iA
\exists 
endsnippet

snippet xnn "xn" iA
x_{n}
endsnippet

snippet ynn "yn" iA
y_{n}
endsnippet

snippet xii "xi" iA
x_{i}
endsnippet

snippet yii "yi" iA
y_{i}
endsnippet

snippet xjj "xj" iA
x_{j}
endsnippet

snippet yjj "yj" iA
y_{j}
endsnippet

snippet xp1 "x" iA
x_{n+1}
endsnippet

snippet n0 "x" iA
n_{0}
endsnippet

snippet xmm "x" iA
x_{m}
endsnippet

snippet AA "forall" iA
\forall 
endsnippet

snippet R0+ "R0+" iA
\R_0^+
endsnippet

snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet uvec "unit vector" iA
\vec e_{$1}$0
endsnippet

snippet lll "l" iA
\ell 
endsnippet

snippet DD "Delta" iA
\Delta{$1} $0 
endsnippet

snippet Dd "del (derivatives)" iA
\mathrm{d}{$1} $0 
endsnippet

snippet veps "epsilon" iA
\varepsilon 
endsnippet

snippet xx "cross" iA
\times 
endsnippet

snippet ** "cdot" iA
\cdot 
endsnippet

snippet '(?<!\\)formule' "formule" rwA
\formule{$1}{$2}$0
endsnippet

snippet !> "mapsto" iA
\mapsto 
endsnippet

snippet invs "inverse" iA
^{-1}
endsnippet

snippet CC "complex" iA
\mathbb{C}
endsnippet

snippet LL "laplace" iA
\mathcal{L}
endsnippet

snippet HH "hamiltonian" iA
\mathcal{H}
endsnippet

snippet FF "overdekking" iA
\mathcal{F}
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

snippet || "mid" iA
 \mid 
endsnippet

snippet inwend "mathring" iA
\mathring 
endsnippet

snippet oline "overline" iA
\overline{$1} $0
endsnippet

snippet NN "natural" iA
\mathbb{N}
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet Uu "cup" iA
\cup 
endsnippet

snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\mathbb{R}
endsnippet

snippet QQ "rational" iA
\mathbb{Q}
endsnippet

snippet ZZ "integer" iA
\mathbb{Z}
endsnippet

# vim:ft=snippets
